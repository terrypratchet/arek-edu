Server side components:
1.Session beans
a)stateless
b)stateful
c)singleton
2.Message-Driver Beans

Not server side component:
3.Entity Beans

Entity Beans becomes a managed object only when associatd with a construct called EntityManager


In the case of EJB, the Component Model defines our interchangeable parts, and the
Container Services are specialists that perform work upon them. The Specification
provides:

Dependency injection
Concurrency
Instance pooling/caching
Transactions
Security
Timers
Naming and object stores
Interoperability
Lifecycle callbacks
Interceptors
Java Enterprise Platform integration




livelocks?


=============================
@Resource
private SessionContext context; // extends EJBContext
getBusinessObject() = this
getInvokedBusinessInterface() - remote, local or webservice
getCallerPrincipal()


Stateless Session Bean:
-does not exist
-method-read pool

Local interfaces are available only within the same JVM as the session bean. Invoking
on a local interface does not copy the parameters or return value. Because of this, local
interfaces are said to follow what is termed call-by-reference semantics



Nonapplication exceptions are
always wrapped, by the Container, in an EJBException . This means that any exception
you throw that is or extends RuntimeException will be caught by the EJB container and
wrapped in an EJBException




Sessin stateful bean
The container can also move the bean instance from the Method-Ready state to the
Does Not Exist state if the bean times out. Timeouts are declared at deployment time
in a vendor-specific manner. When a timeout occurs in the Method-Ready state, the
container may, but is not required to, call any @PreDestroy callback methods. A stateful
bean cannot time out while a transaction is in progress.

a bean instance
may be passivated (and activated) several times in its life, or not at all.